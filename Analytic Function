
--Analytic Function
use AdventureWorksLT2008
SELECT * FROM Sales.SalesOrderDetail

SELECT SalesOrderID, OrderQty,
row_number() OVER(ORDER BY SalesOrderID) AS r_no
FROM Sales.SalesOrderDetail
WHERE SalesOrderID IN (43670, 43669, 43667, 43663)
ORDER BY r_no

SELECT SalesOrderID, OrderQty, ProductID,
row_number() OVER(PARTITION BY SalesOrderID
ORDER BY ProductID ) AS r_no
FROM Sales.SalesOrderDetail s
WHERE SalesOrderID IN (43670, 43669, 43667, 43663)
ORDER BY s.SalesOrderID , r_no

--CUME_DIST() function:
--calculates the relative position of a specified value in a group of values. 
--Assuming ascending ordering, the CUME_DIST of a value in row r is defined as the number of rows with 
--values less than or equal to that value in row r, divided by the number of rows evaluated in the partition

SELECT SalesOrderID, OrderQty
FROM Sales.SalesOrderDetail
WHERE SalesOrderID IN (43670, 43669, 43667, 43663)


SELECT SalesOrderID, OrderQty, RANK() OVER(ORDER BY SalesOrderID DESC) AS R_NO,
CUME_DIST() OVER(ORDER BY SalesOrderID) CDist
FROM Sales.SalesOrderDetail
WHERE SalesOrderID IN (43670, 43669, 43667, 43663)
ORDER BY CDist DESC

--for 43670:
--no.of obs A: 4
--no.of obs below 43670 B: 6
--total no.of obs N: 10
--(A+B)/N
--(4+6)/10 = 1

--for 43669
--no.of obs A: 1
--no.of obs below 43669 B: 5
--total no.of obs N: 10
--(A+B)/N
--(1+5)/10 = 0.6

--for 43667
--no.of obs A: 4
--no.of obs below 43667 B: 1
--total no.of obs N: 10
--(A+B)/N
--(4+1)/10 = 0.5

--for 43663
--no.of obs A: 1
--no.of obs below 43669 B: 0
--total no.of obs N: 10
--(A+B)/N
--(1+0)/10 = 0.1

SELECT SalesOrderID, OrderQty, ProductID,
CUME_DIST() OVER(PARTITION BY SalesOrderID
ORDER BY ProductID ) AS CDist
FROM Sales.SalesOrderDetail s
WHERE SalesOrderID IN (43670, 43669, 43667, 43663)
ORDER BY s.SalesOrderID DESC, CDist DESC

--for 43670
--no.of obs A: 1
--no.of obs below 43670, 776 B: 3
--total no.of obs N: 4
--(A+B)/N
--(1+3)/4 = 1

--for 43670
--no.of obs A: 1
--no.of obs below 43670, 773 B: 2
--total no.of obs N: 4
--(A+B)/N
--(1+2)/4 = 0.75

--for 43670
--no.of obs A: 1
--no.of obs below 43670, 710 B: 1
--total no.of obs N: 4
--(A+B)/N
--(1+1)/4 = 0.5

--for 43670
--no.of obs A: 1
--no.of obs below 43670, 709 B: 0
--total no.of obs N: 4
--(A+B)/N
--(1+0)/4 = 0.25



--PERCENT_RANK() function:
--Calculates the relative rank of a row within a group of rows in SQL Server. 
--Use PERCENT_RANK to evaluate the relative standing of a value within a query result set or partition
--The formula to find PERCENT_RANK() is as following:
--PERCENT_RANK() = (RANK() – 1) / (Total Rows – 1)

SELECT SalesOrderID, OrderQty,
RANK() OVER(ORDER BY SalesOrderID) Rnk
FROM Sales.SalesOrderDetail
WHERE SalesOrderID IN (43670, 43669, 43667, 43663)
ORDER BY Rnk

--PERCENT_RANK() = (RANK() – 1) / (Total Rows – 1)
SELECT SalesOrderID, OrderQty,
RANK() OVER(ORDER BY SalesOrderID) as Rnk,
ROUND(PERCENT_RANK() OVER(ORDER BY SalesOrderID),2) AS Pctrnk
FROM Sales.SalesOrderDetail
WHERE SalesOrderID IN (43670, 43669, 43667, 43663)
ORDER BY Pctrnk 



SELECT SalesOrderID, OrderQty, ProductID,
RANK() OVER(PARTITION BY SalesOrderID
ORDER BY ProductID ) Rnk
FROM Sales.SalesOrderDetail s
WHERE SalesOrderID IN (43670, 43669, 43667, 43663)
ORDER BY SalesOrderID

--PERCENT_RANK() = (RANK() – 1) / (Total Rows – 1)
SELECT SalesOrderID, OrderQty, ProductID,
RANK() OVER(PARTITION BY SalesOrderID
ORDER BY ProductID ) Rnk,
PERCENT_RANK() OVER(PARTITION BY SalesOrderID ORDER BY ProductID ) AS Pctrnk
FROM Sales.SalesOrderDetail s
WHERE SalesOrderID IN (43670, 43669, 43667, 43663)
ORDER BY SalesOrderID

--Lead() function:
--Accesses data from a subsequent row in the same result set.

--Lag() function:
--Accesses data from a previous row in the same result set

--lead() and lag()
SELECT s.SalesOrderID,s.SalesOrderDetailID,s.OrderQty
FROM Sales.SalesOrderDetail s
WHERE SalesOrderID IN (43670, 43669, 43667, 43663)
ORDER BY s.SalesOrderID,s.SalesOrderDetailID,s.OrderQty

SELECT s.SalesOrderID,s.SalesOrderDetailID,s.OrderQty,
LEAD(SalesOrderDetailID) OVER (ORDER BY SalesOrderDetailID
) LeadValue,
LAG(SalesOrderDetailID) OVER (ORDER BY SalesOrderDetailID
) LagValue
FROM Sales.SalesOrderDetail s
WHERE SalesOrderID IN (43670, 43669, 43667, 43663)
ORDER BY s.SalesOrderID,s.SalesOrderDetailID,s.OrderQty

--2nd lead() and 2nd lag()
SELECT s.SalesOrderID,s.SalesOrderDetailID,s.OrderQty,
LEAD(SalesOrderDetailID,2) OVER (ORDER BY SalesOrderDetailID
) LeadValue,
LAG(SalesOrderDetailID,2) OVER (ORDER BY SalesOrderDetailID
) LagValue
FROM Sales.SalesOrderDetail s
WHERE SalesOrderID IN (43670, 43669, 43667, 43663)
ORDER BY s.SalesOrderID,s.SalesOrderDetailID,s.OrderQty


--You can easily replace this NULL Value with any other default value by passing third parameter in LEAD and LAG function.
SELECT s.SalesOrderID,s.SalesOrderDetailID,s.OrderQty,
LEAD(SalesOrderDetailID,2,0) OVER (ORDER BY SalesOrderDetailID
) LeadValue,
LAG(SalesOrderDetailID,2,0) OVER (ORDER BY SalesOrderDetailID
) LagValue
FROM Sales.SalesOrderDetail s
WHERE SalesOrderID IN (43670, 43669, 43667, 43663)
ORDER BY s.SalesOrderID,s.SalesOrderDetailID,s.OrderQty

SELECT s.SalesOrderID,s.SalesOrderDetailID,s.OrderQty,
LEAD(SalesOrderDetailID) OVER (PARTITION BY SalesOrderID
								ORDER BY SalesOrderDetailID) LeadValue,
LAG(SalesOrderDetailID) OVER (PARTITION BY SalesOrderID
								ORDER BY SalesOrderDetailID) LagValue
FROM Sales.SalesOrderDetail s
WHERE SalesOrderID IN (43670, 43669, 43667, 43663)
ORDER BY s.SalesOrderID,s.SalesOrderDetailID,s.OrderQty

--FIRST() function:
--returns the first value of selected column

--LAST() function:
--returns the last value of selected column
SELECT s.SalesOrderID,s.SalesOrderDetailID,s.OrderQty,
FIRST_VALUE(SalesOrderDetailID) OVER (ORDER BY SalesOrderDetailID) as FstValue,
--ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as FstValue,
LAST_VALUE(SalesOrderDetailID) OVER (ORDER BY SalesOrderDetailID
ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as LstValue
FROM Sales.SalesOrderDetail s
WHERE SalesOrderID IN (43670, 43669, 43667, 43663)
ORDER BY s.SalesOrderID,s.SalesOrderDetailID,s.OrderQty


SELECT s.SalesOrderID,s.SalesOrderDetailID,s.OrderQty,
FIRST_VALUE(SalesOrderDetailID) OVER (PARTITION BY SalesOrderID ORDER BY SalesOrderDetailID) FstValue,
FIRST_VALUE(SalesOrderDetailID) OVER (PARTITION BY SalesOrderID ORDER BY SalesOrderDetailID
									  ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) Fst_Value,
FIRST_VALUE(SalesOrderDetailID) OVER (PARTITION BY SalesOrderID ORDER BY SalesOrderDetailID
									  ROWS BETWEEN UNBOUNDED PRECEDING AND current row) Fst_Value_current,
LAST_VALUE(SalesOrderDetailID) OVER (PARTITION BY SalesOrderID
ORDER BY SalesOrderDetailID
ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) LstValue
FROM Sales.SalesOrderDetail s
WHERE SalesOrderID IN (43670, 43669, 43667, 43663)
ORDER BY s.SalesOrderID,s.SalesOrderDetailID,s.OrderQty



SELECT SalesOrderID, OrderQty, ProductID, SalesOrderDetailID,
ROW_NUMBER() OVER (ORDER BY SalesOrderID) ROW_NUM,
RANK() OVER (ORDER BY SalesOrderID) AS RANK_NO,
DENSE_RANK() OVER(ORDER BY SalesOrderID) AS DNS_RNK,
ROUND(PERCENT_RANK() OVER(PARTITION BY SalesOrderID ORDER BY PRODUCTid),2) AS PRCNT_RANK,
LEAD(SalesOrderDetailID) OVER (PARTITION BY SalesOrderID ORDER BY PRODUCTid) AS LEAD1,
LAG(SalesOrderDetailID,2,0)OVER(ORDER BY SalesOrderDetailID) AS LAG2,
FIRST_VALUE(SalesOrderDetailID) OVER(PARTITION BY SalesOrderID ORDER BY PRODUCTID) AS fst_VALUE,
LAST_VALUE(SalesOrderDetailID) OVER ( ORDER BY SalesOrderID ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)AS LAST_VALUE
FROM Sales.SalesOrderDetail 
WHERE SalesOrderID IN (43670, 43669, 43667, 43663)
ORDER BY SalesOrderID,ProductID
